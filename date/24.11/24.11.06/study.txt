// 1. 생성자 함수 

function Item ( name , price ){
    this.name = name ; 
    this.price = price;
    this.showPrice = function(){
        console.log(`${name}의 가격은 ${price}원 입니다.`);
    }
}

let item1 = new Item ( "장미칼", 5000)
console.log(item1);
item1.showPrice();


// 생성자 함수는 객체를 매번 만들 수 없기에 그 틀에다가 계속해서 찍어주는 걸 말해.
// 그렇기 때문에 새로 객체를 만들기 위해서는 그걸 넣어줄 변수값을 지정해주고 뒤에 대문자로 시작하는 변수값과 매개변수를 써넣어주면 되는데.
// 지금 헷갈리는 부분이 안에 함수를 작성할때 이름을 지정해야지
// 뭐가 잘못된 걸까. 지금 그 매개변수 작성하는 방식이 틀린건가. 

// 수정 사항 ======== 1. 함수를 그냥 만들어주는 게 아니라 새로운 변수에다 할당해 주었어. 왜? 밖에서도 실행할 수 있어야 하니까. 결국 
// 생성자 함수? 라는 건 새로운 객체를 만들 때 사용할 수 있도록 하는 거니까. 그냥 함수 선언식으로 작성하면 못써서 그런거 같은데? 
// 그리고 변수에 문자열을 넣을 때는 "" 표시를 꼭 해주어야 하고. key값을 불러올 때는 . 변수를 실행할 때는 console.log를 사용해야 함..!  
// 함수에도 this를 선언해야 하는 이유는 객체에 함수를 포함시켜 주기 위해서. this를 선언하지 않으면 Item내부에만 존재하는 함수가 된다. 


// 2. 계산된 프로퍼티
// 키값에는 [변수] 값을 넣어줄 수 있다. 이것을 계산된 프로퍼티라 한다.
// 변수 뿐만 아니라 계산식 혹은 "문자열" + "문자열" 도 넣어줄 수 있다.  

// Object.assing() : 객체 복제 
// 무언가 객체를 복제하려고 할때 단순히 변수값을 저장한다고 해서 이뤄지지 않는다. 

/* let = user {
    name = "tom"
    age : 30
}

const cloneUser = user  
이런 식으로 작성하면 복제가 불가능하다.
이때 사용해주어야 하는 것이 Object.assign ( {} , 복제하려는 변수값) 의 형태이다. 
const newUser = Object.assign({} , user)
이렇게 작성하면 newUser에는 user와 똑같은 객체가 할당된다. newUser와 user는 서로 독립된 객체로 newUser의 값을 변경해도 user의 값이 변경되지는 않는다. 
*/

// const newUser = Object.assign( {} , user)
// {} 안에 key와 value였나? 그걸 같이 작성해주면 user값에 추가 되어 병합된다. 

// Object.assign(변수, 변수1, 변수2) 이런 식으로 작성하면 여러 변수와의 병합도 가능하다. 

// (2) Object.keys(): Object.Value(): , Object.entries() : 키/값 배열 반환. Object.fromEntries() 키/값을 객체로 반환. 
    key와 value 값을 배열로 반환해준다.

ex) const newUser = Object.entries(user) 이렇게 하면 newUser안에 user의 키와 배열이 반환된다는거지.
뭔가 단순히 객체를 복사하는 것과 다른건가. 아니면 그냥  
