/*// 1. while문.
 while문에도 
초기값과 범위 증감이 모두 존재한다. 초기값은 보통 밖에다 저장. 
작성방법 1. 범위를 지정해서 그 범위에 도달하면 종료되도록.
작성방법 2. 조건에 true값을 지정해준 뒤 break를 걸어 탈출하기. 

// 2. break와 continue
break : 멈추고 빠져나옴
continue : 멈추고 다음으로 진행

foreach 는 메소드. 배열값 형탤 사용 1개 요소 , 2개는 요소 인덱스, 3개는 요소 인덱스 배열 


foreach ( num ) = > {
    sum += num
}

filter filter는 조건부합하는 애들 모두 배열로 반환. 

find find는 조건에 부합하는 애 첫번째값을 값으로 반환 

map mpa은 함수 안에 쓰여진 코드를 전체 배열에 실행하는거.




// for of, forEach
let arr3 = [1,5,3,4,5]
let alphabets = ['a', 'b', 'c','d','e','f']

// 기본 for문

for( i=0; i<arr3.length ; i++){
   console.log(arr3[i]) 
}

//  for of 문 = > 배열을 모두 한번씩 반복해서 출력할때 사용하면 편하다. for  let 변수

for ( let arr of arr3) {
    console.log(arr)
}


for ( let el of arr3){
    console.log(el)
}

// forEach(익명함수)
// forEach(function(a[,b,c])) a는 필수 b,c는 있어도되고 없어도된다.  a는 el b는 index의 의미 c는 배열

arr3.forEach(function(num,i,arr){
    console.log("요소", num)
    console.log("배열의 인덱스", i)
    console.log("arr3", arr)
    console.log("--------")
})

arr3.forEach((el ) => {
    console.log(el)
})

// filter , map , find
// 매개변수로 들어가는 익명함수에 리턴값이 필수

console.log('------filter------')
//  return 이후의 조건에 만족하는 요소를 찾아서 \
// 새로운 배열로 반환 => 새로운 변수를 지정해주어야함. 

arr2 = ["quakka" , "rabbit" , "puppy", "hamster"]


let six = arr2.filter(function(el){
    return el.length===6 
})

console.log(six)

console.log('---find----')

let six2=arr2.find(function(word){
    return word.length===6
})

console.log(six2)

console.log('----map-----')

let arr4 = [1,2,3,4,5]
// let mlutiArr = arr4.map(function(number){
//     return number*3
// })

let multiiArr = arr4.map((number) => number*3
)
console.log(multiiArr)

// 오브젝트 반복 
const areaNum = {
	Seoul: "02",
	Incheon: "032",
	Daejeon: "042",
	Busan: "051",
	Ulsan: "052",
	Daegu: "053",
	Gwangju: "062",
	Jeju: "064",
};

// for in 구문은 

for (let area in areaNum) {
    console.log(area) //key > 문자열로 반환중
    //값에 접근? 대괄호 접근법으로만 사용가능 
    console.log(areaNum[area])
}


 / ///// 표준객체 
 